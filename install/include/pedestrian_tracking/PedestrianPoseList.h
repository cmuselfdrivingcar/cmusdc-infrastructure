// Generated by gencpp from file pedestrian_tracking/PedestrianPoseList.msg
// DO NOT EDIT!


#ifndef PEDESTRIAN_TRACKING_MESSAGE_PEDESTRIANPOSELIST_H
#define PEDESTRIAN_TRACKING_MESSAGE_PEDESTRIANPOSELIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <pedestrian_tracking/PedestrianPose.h>

namespace pedestrian_tracking
{
template <class ContainerAllocator>
struct PedestrianPoseList_
{
  typedef PedestrianPoseList_<ContainerAllocator> Type;

  PedestrianPoseList_()
    : header()
    , poses()
    , frameID(0)  {
    }
  PedestrianPoseList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , poses(_alloc)
    , frameID(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::pedestrian_tracking::PedestrianPose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pedestrian_tracking::PedestrianPose_<ContainerAllocator> >::other >  _poses_type;
  _poses_type poses;

   typedef uint32_t _frameID_type;
  _frameID_type frameID;




  typedef boost::shared_ptr< ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator> const> ConstPtr;

}; // struct PedestrianPoseList_

typedef ::pedestrian_tracking::PedestrianPoseList_<std::allocator<void> > PedestrianPoseList;

typedef boost::shared_ptr< ::pedestrian_tracking::PedestrianPoseList > PedestrianPoseListPtr;
typedef boost::shared_ptr< ::pedestrian_tracking::PedestrianPoseList const> PedestrianPoseListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pedestrian_tracking

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'pedestrian_tracking': ['/home/teame16/CMUSelfDrivingCar/src/perception/pedestrian_tracking/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf65e910d3db530c8960dc8ffd5c7934";
  }

  static const char* value(const ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf65e910d3db530cULL;
  static const uint64_t static_value2 = 0x8960dc8ffd5c7934ULL;
};

template<class ContainerAllocator>
struct DataType< ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pedestrian_tracking/PedestrianPoseList";
  }

  static const char* value(const ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
PedestrianPose[] poses\n\
uint32 frameID\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: pedestrian_tracking/PedestrianPose\n\
uint32 pedID\n\
uint32 frameID\n\
float64 x\n\
float64 y\n\
\n\
#undecided data type\n\
";
  }

  static const char* value(const ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.poses);
      stream.next(m.frameID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PedestrianPoseList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pedestrian_tracking::PedestrianPoseList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pedestrian_tracking::PedestrianPose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
    s << indent << "frameID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frameID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PEDESTRIAN_TRACKING_MESSAGE_PEDESTRIANPOSELIST_H
